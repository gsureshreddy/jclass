/*!
 * JavaScript Inheritance with Private Members
 * Largely based upon John Resig's inheritance technique,
 * (see http://ejohn.org/blog/simple-javascript-inheritance/)
 * that was inspired by base2 and Prototype.
 *
 * Works with and without node.
 *
 * Licensed under the MIT license.
 * http://www.opensource.org/licenses/mit-license
 *
 * Marcel Rieger, 2013
 */
var initializing=false;
var fnTest=/xyz/.test(function(){xyz;})?/\b_super\b/:/.*/;var JClass=function(){};JClass.extend=function(a,d){var h=this.prototype;initializing=true;var f=new this();
initializing=false;var i=new Object();var c=new Object();for(var b in a){if(a[b] instanceof Function){var e=(function(j,k){return function(){var o=this._super;
this._super=h[j];var p=this._private;this._private=this._private||i;var l=this._methods;if(j=="init"){this._methods=this._methods||c;for(var n in c){this._methods[n]=this._methods[n]||c[n];
}c=this._methods;}for(var n in c){this[n]=c[n];}var m=k.apply(this,arguments);for(var n in c){delete this[n];}this._methods=l;if(this._methods===undefined){delete this._methods;
}this._super=o;if(this._super===undefined){delete this._super;}this._private=p;if(this._private===undefined){delete this._private;}return m;};})(b,a[b]);
if(/^__/.test(b)){c[b]=e;}else{f[b]=e;}}}function g(){if(!initializing&&this.init){this.init.apply(this,arguments);}}g.prototype=f;g.prototype.constructor=g;
if(d!==false){g.extend=arguments.callee;}return g;};if(typeof module!=="undefined"&&module.exports){module.exports=JClass;}