/*!
 * JavaScript Inheritance with Private Members
 * Largely based upon John Resig's inheritance technique,
 * (see http://ejohn.org/blog/simple-javascript-inheritance/)
 * that was inspired by base2 and Prototype.
 *
 * Works with AND without node.
 *
 * Licensed under the MIT license.
 * http://www.opensource.org/licenses/mit-license
 *
 * Marcel Rieger, 2013
 */
var initializing=false;
var fnTest=/xyz/.test(function(){xyz;})?/\b_super\b/:/.*/;var Class=function(){};Class.extend=function(b,e){var h=this.prototype;initializing=true;var g=new this();
initializing=false;var i=new Object();var d=new Object();for(var c in b){if(b[c] instanceof Function){var f=(function(j,k){return function(){var o=this._super;
this._super=h[j];var p=this._private;this._private=this._private||i;var l=this._methods;this._methods=this._methods||d;for(var n in d){this._methods[n]=this._methods[n]||d[n];
}for(var n in this._methods){this[n]=this._methods[n];}var m=k.apply(this,arguments);for(var n in d){delete this[n];}this._methods=l;if(this._methods===undefined){delete this._methods;
}this._super=o;if(this._super===undefined){delete this._super;}this._private=p;if(this._private===undefined){delete this._private;}return m;};})(c,b[c]);
if(/^__/.test(c)){d[c]=f;}else{g[c]=f;}}}function a(){if(!initializing&&this.init){this.init.apply(this,arguments);}}a.prototype=g;a.prototype.constructor=a;
if(e!==false){a.extend=arguments.callee;}return a;};if(typeof module!=="undefined"&&module.exports){module.exports=Class;}